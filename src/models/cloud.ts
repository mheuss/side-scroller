import { P5CanvasInstance } from "@p5-wrapper/react";
import { Sprite } from "src/models/sprite";
import { colors } from "src/constants";

/*
  The below is autogenerated from the code.

The provided code defines a `Cloud` class in TypeScript that extends the `Sprite` class. The class represents a cloud entity in a graphical environment using the p5.js library. The cloud can have different moods, each affecting its behavior and appearance.

Key components of the code:

- **Enum**:
  - `Mood`: Specifies the mood of the cloud, either `Happy` or `Sad`. When in a sad mood, the cloud has the capability to throw lightning (though this is planned for future implementation).

- **Class Definition**:
  - **Properties**:
    - `mood`: Tracks whether the cloud is `Happy` or `Sad`.
    - `chanceOfStrike`: The probability of the cloud throwing lightning when it is sad (0-1000, where 1000 represents 100%).
    - `chanceCounter`: A counter used to manage the timing and occurrence of lightning strikes.
    - `className`: Identifier for the class, set to "Cloud".

  - **Constructor**: Initializes the cloud with position, scale, and initial chance of lightning strike probability.

- **Methods**:
  - **Public Methods**:
    - `setMood`: Sets the cloud's mood (Happy or Sad) and optionally sets the chance of lightning strike.
    - `setChanceOfStrike`: Sets the probability of the cloud throwing lightning.
    - `draw`: Main rendering function that drifts the cloud across the screen and draws it based on its mood.

  - **Private Methods**:
    - `drift`: Moves the cloud leftward across the screen and resets its position once it moves off-screen.
    - `drawHappy`: Contains p5.js commands to draw the cloud in a happy state.
    - `drawSad`: Contains p5.js commands to draw the cloud in a sad state. It also handles the logic for determining whether the cloud throws lightning.

The `Cloud` class manages the rendering and behavior of cloud entities that can drift across the screen. Depending on their mood, they exhibit different visual properties and behaviors, such as the potential to throw lightning when sad. The `draw` method ensures that the cloud's appearance is updated appropriately based on its state.
*/

/**
 * Specifies the mood of the cloud
 */
export enum Mood {
  Happy,
  Sad, // @todo Implement sad to throw lightning
}

/**
 * This class represents a cloud that can be happy or sad. Sad cloud throws lightning,
 * happy cloud just drifts.
 */
export class Cloud extends Sprite {
  private mood: Mood = Mood.Happy;
  private chanceOfStrike; // 0-1000 - when the cloud is sad, it has a chance of striking - 1000 being 100%
  private chanceCounter;
  public className = "Cloud";

  constructor(
    p5: P5CanvasInstance,
    x: number,
    y: number,
    scale: number,
    chanceOfStrike = 0,
  ) {
    super(p5, x, y, scale ?? 1);
    this.chanceOfStrike = chanceOfStrike;
    this.chanceCounter = 0;
  }

  /**
   * Sets the cloud's mood
   * @param mood The mood to set, i.e. Happy or Sad
   * @param chanceOfStrike The chance of the cloud striking - from 0 to 1000
   */
  public setMood(mood: Mood, chanceOfStrike: number = 0) {
    this.mood = mood;
    if (mood === Mood.Sad) {
      this.chanceOfStrike = chanceOfStrike;
    }
  }

  /**
   * Sets the chance of the cloud striking
   * @param chanceOfStrike The chance of the cloud striking - from 0 to 1000
   */
  public setChanceOfStrike(chanceOfStrike: number) {
    this.chanceOfStrike = chanceOfStrike;
  }

  /**
   * Drifts the cloud across the screen
   */
  private drift = () => {
    this.move(-0.4, 0);
    const x = this.getX();
    const y = this.getY();

    if (x < -200 - this.scale * 100) {
      this.setPosition(this.scale * 100 + 1024, y);
    }
  };

  /**
   * Draws a happy cloud
   */
  private drawHappy = () => {
    // We pass the draw commands to the base class to render.
    // Why pass as an array? Because the sprite class will provide mathematic
    // computations to account for scale and position.
    this.processArray([
      ["stroke", ...colors.cloudBorder],
      ["strokeWeight", 3],
      ["fill", 255],
      ["ellipse", 30, 70, 60, 60],
      ["ellipse", 130, 70, 60, 60],
      ["ellipse", 37, 40, 50, 50],
      ["ellipse", 95, 40, 75, 75],
      ["noStroke"],
      ["rect", 23, 43, 100, 55],
      ["rect", 29, 42, 106, 55],
      ["rect", 14, 42, 50, 25],
      ["rect", 24, 32, 50, 25],
      ["rect", 12, 48, 10, 10],
      ["stroke", ...colors.cloudBorder],
      ["strokeWeight", 3],
      ["line", 30, 100, 130, 100],
      ["stroke", ...colors.cloudBorder],
      ["strokeWeight", 2],
      ["fill", ...colors.cloudBorder],
      ["ellipse", 60, 50, 10, 10],
      ["ellipse", 100, 50, 10, 10],
      ["fill", ...colors.cloudBlush],
      ["ellipse", 50, 70, 12, 12],
      ["ellipse", 110, 70, 12, 12],
      ["stroke", ...colors.cloudBorder],
      ["noFill"],
      ["arc", 80, 55, 20, 0, this.p5.PI],
    ]);
  };

  /**
   * Draws a sad cloud
   */
  private drawSad = () => {
    const { chanceOfStrike } = this;
    let cloudFill = 180;
    if (chanceOfStrike) {
      if (this.chanceCounter === 0) {
        const strike = this.randomInt(0, 1000);
        if (strike < chanceOfStrike) {
          this.chanceCounter = 1;
        }
      } else {
        this.chanceCounter++;
        cloudFill = 180 - this.chanceCounter / 3;
        if (this.chanceCounter > 120) {
          this.chanceCounter = 0;
        }
      }
    }

    // We pass the draw commands to the base class to render.
    // Why pass as an array? Because the sprite class will provide mathematic
    // computations to account for scale and position.
    this.processArray([
      ["stroke", ...colors.cloudBorder],
      ["strokeWeight", 3],
      ["fill", cloudFill],
      ["ellipse", 30, 70, 60, 60],
      ["ellipse", 130, 70, 60, 60],
      ["ellipse", 37, 40, 50, 50],
      ["ellipse", 95, 40, 75, 75],
      ["noStroke"],
      ["rect", 23, 43, 100, 55],
      ["rect", 29, 42, 106, 55],
      ["rect", 14, 42, 50, 25],
      ["rect", 24, 32, 50, 25],
      ["rect", 12, 48, 10, 10],
      ["stroke", ...colors.cloudBorder],
      ["strokeWeight", 3],
      ["line", 30, 100, 130, 100],
      ["stroke", ...colors.cloudBorder],
      ["strokeWeight", 2],
      ["fill", ...colors.cloudBorder],
      ["ellipse", 60, 50, 10, 10],
      ["ellipse", 100, 50, 10, 10],
      ["stroke", ...colors.cloudBorder],
      ["noFill"],
      ["arc", 80, 75, 20, this.p5.PI, 0],
      ["strokeWeight", 3],
      ["line", 70, 45, 60, 35],
      ["line", 90, 45, 100, 35],
    ]);
  };

  /**
   * Draws the cloud
   */
  draw = () => {
    this.drift();
    const { mood } = this;

    return mood === Mood.Happy ? this.drawHappy() : this.drawSad();
  };
}
