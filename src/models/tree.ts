import { Sprite } from "src/models/sprite";
import { P5CanvasInstance } from "@p5-wrapper/react";
import { colors } from "src/constants";

/*
  The below is autogenerated from the code.

The provided code defines a `Tree` class in TypeScript that extends the `Sprite` class. This class represents a tree with a randomized canopy, adding visual variety within a p5.js-based graphical environment.

Key components of the code:

- **Interfaces**:
  - `IRandomizedElements`: Specifies the properties (`x`, `y`, `width`) for parts of the tree canopy.
  - `ITreeRandomizedElements`: Represents the structure of the tree's randomized elements, dividing the canopy into background and foreground components.

- **Class Definition**:
  - **Properties**:
    - `randomizedElements`: An object adhering to `ITreeRandomizedElements`, managing the randomized positions and sizes of the tree's canopy elements.
    - `className`: Identifier for the class, set to "Tree".

  - **Constructor**: Initializes the tree with position, scale, and randomized canopy elements.
    - Sets up the tree's bounding box for collision detection.
    - Randomly defines positions and sizes for the background and foreground canopy elements.

- **Methods**:
  - **Public Methods**:
    - `draw`: Main rendering function for the tree. It processes the `randomizedElements` to execute the p5.js commands, rendering the tree's trunk and canopy based on the pre-randomized values.

- **Randomization in Constructor**:
  - The tree's canopy is defined by a series of ellipses representing foliage. Both background and foreground elements are randomized in terms of position (`x`, `y`) and size (`width`).
  - Background canopy elements are initialized with random adjustments to their positions and sizes.
  - Foreground canopy elements are similarly initialized but drawn closer to the viewer.

- **Drawing Instructions**:
  - In the `draw` method:
    - Defines color variables for different parts of the tree (foliage, bark).
    - Passes an array of p5.js commands to `processArray` to handle rendering, including foliage and trunk elements.
    - Background canopy elements are drawn first with darker foliage.
    - Trunk elements are drawn using `rect` and `arc` functions.
    - Foreground canopy elements are drawn last with lighter foliage, giving a sense of depth.

The `Tree` class adds visual complexity and variety to tree representations by randomizing the position and size of canopy elements. It ensures that each tree instance appears unique, enhancing the overall aesthetic of the graphical environment. The `draw` method effectively renders the tree based on the randomized properties defined during initialization.
*/

/**
 * Keeps track of the randomized placements of the parts o' the tree
 */
export interface IRandomizedElements {
  x: number;
  y: number;
  width: number;
}

/**
 * Keeps track of the randomized elements of the tree
 */
interface ITreeRandomizedElements {
  backgroundCanopy: IRandomizedElements[];
  foregroundCanopy: IRandomizedElements[];
}

/**
 * This class represents a tree that can have a randomized canopy.
 */
export class Tree extends Sprite {
  private randomizedElements: ITreeRandomizedElements = {
    backgroundCanopy: [],
    foregroundCanopy: [],
  };
  public className = "Tree";

  /**
   * Initializes everything for the tree to get busy with
   * @param p5 A reference to the p5 base class
   * @param x The x coordinate of the tree
   * @param y The y coordinate of the tree
   * @param scale The scale of the tree
   */
  constructor(p5: P5CanvasInstance, x: number, y: number, scale: number) {
    super(p5, x, y, scale ?? 1, { x: 70, y: 100, h: 100, w: 25 });

    // Randomize the tree's elements
    // We are doing this once, in the constructor. It'll just render
    // in the draw.
    this.randomizedElements = {
      backgroundCanopy: [
        {
          x: 50 + (this.randomInt(0, 40) - 20),
          y: 70 + (this.randomInt(0, 20) - 10),
          width: 100 + (this.randomInt(0, 40) - 20),
        },
        {
          x: 140 + (this.randomInt(0, 40) - 20),
          y: 80 + (this.randomInt(0, 20) - 10),
          width: 100 + (this.randomInt(0, 40) - 20),
        },
        {
          x: 80 + (this.randomInt(0, 40) - 20),
          y: 50 + (this.randomInt(0, 20) - 10),
          width: 100 + (this.randomInt(0, 40) - 20),
        },
      ],
      foregroundCanopy: [
        {
          x: 120 + (this.randomInt(0, 40) - 20),
          y: 45 + (this.randomInt(0, 20) - 10),
          width: 90 + (this.randomInt(0, 30) - 15),
        },
        {
          x: 95 + (this.randomInt(0, 40) - 20),
          y: 85 + (this.randomInt(0, 20) - 10),
          width: 90 + (this.randomInt(0, 30) - 15),
        },
        {
          x: 50 + (this.randomInt(0, 40) - 20),
          y: 50 + (this.randomInt(0, 20) - 10),
          width: 90 + (this.randomInt(0, 30) - 15),
        },
      ],
    };
  }

  /**
   * Draws tree
   */
  public draw = () => {
    const { darkFoliage, foliageOutline, lightFoliage, lightBark, darkBark } =
      colors;

    const { backgroundCanopy, foregroundCanopy } = this.randomizedElements;

    // We pass the draw commands to the base class to render.
    // Why pass as an array? Because the sprite class will provide mathematic
    // computations to account for scale and position.
    this.processArray([
      ["fill", darkFoliage],
      ["stroke", foliageOutline],
      ["strokeWeight", 2],
      [
        "ellipse",
        backgroundCanopy[0].x,
        backgroundCanopy[0].y,
        backgroundCanopy[0].width,
        backgroundCanopy[0].width,
      ],
      [
        "ellipse",
        backgroundCanopy[1].x,
        backgroundCanopy[1].y,
        backgroundCanopy[1].width,
        backgroundCanopy[1].width,
      ],
      [
        "ellipse",
        backgroundCanopy[2].x,
        backgroundCanopy[2].y,
        backgroundCanopy[2].width,
        backgroundCanopy[2].width,
      ],

      ["noStroke"],
      ["fill", 0, 0, 0, 30],
      ["ellipse", 90, 200, 180, 10],
      ["noStroke"],
      ["noFill"],
      ["stroke", lightBark],
      ["strokeWeight", 15],
      ["arc", 70, 90, 50, 50, this.p5.PI / 4 + 0.57, this.p5.PI],
      ["stroke", darkBark],
      ["arc", 90, 90, 50, 50, this.p5.PI + 3.3, this.p5.PI / 4 + 0.57],
      ["noStroke"],
      ["fill", lightBark],
      ["rect", 70, 100, 10, 100],
      ["fill", darkBark],
      ["rect", 80, 100, 15, 100],
      ["stroke", foliageOutline],
      ["strokeWeight", 2],
      ["fill", lightFoliage],
      [
        "ellipse",
        foregroundCanopy[0].x,
        foregroundCanopy[0].y,
        foregroundCanopy[0].width,
        foregroundCanopy[0].width,
      ],
      [
        "ellipse",
        foregroundCanopy[1].x,
        foregroundCanopy[1].y,
        foregroundCanopy[1].width,
        foregroundCanopy[1].width,
      ],
      [
        "ellipse",
        foregroundCanopy[2].x,
        foregroundCanopy[2].y,
        foregroundCanopy[2].width,
        foregroundCanopy[2].width,
      ],
    ]);
  };
}
